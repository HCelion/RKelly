devtools::load_all(".")
kelly_criterion <- function(p, alpha_w, alpha_l){
q <- 1-p
numerator <- p*alpha_w-q*alpha_l
denominator <- alpha_w*alpha_l
return(numerator/denominator)
}
kelly_criterion(0.5, 1,1)
kelly_criterion(0.55, 1,1)
kelly_criterion(0.45, 1,1)
dump('kelly_criterion', 'R/probability_functions.R', append = T)
document()
library(devtools)
document()
devtools::load_all(".")
kelly_criterion(0.5, 1, 1)
library(RKelly)
kelly_back_dec <- function(price,p, commision_rate){
alpha_w = (1-commision_rate)/price
alpha_l = 1
fraction = kelly_criterion(p, alpha_w = alpha_w, alpha_l = alpha_l)
return(fraction)
}
kelly_back_dec(2, 0.05, 0.05)
kelly_back_dec(2, 0.5, 0.05)
kelly_back_dec <- function(price,p, commision_rate){
alpha_w = (1-commision_rate)/price
print(alpha_w)
alpha_l = 1
fraction = kelly_criterion(p, alpha_w = alpha_w, alpha_l = alpha_l)
return(fraction)
}
kelly_back_dec(2, 0.5, 0.05)
kelly_back_dec <- function(price,p, commision_rate){
alpha_w = (1-commision_rate)*(price-1)
print(alpha_w)
alpha_l = 1
fraction = kelly_criterion(p, alpha_w = alpha_w, alpha_l = alpha_l)
return(fraction)
}
kelly_back_dec(2, 0.5, 0.05)
kelly_back_dec(2.01, 0.5, 0.05)
kelly_back_dec(2.02, 0.5, 0.05)
kelly_back_dec(2.04, 0.5, 0.05)
kelly_back_dec(2.08, 0.5, 0.05)
kelly_back_dec(2.07, 0.5, 0.05)
1/2.07
document()
devtools::load_all(".")
help(kelly_back_dec)
document()
kelly_lay_back <- function(price, p, commision_rate){
p <- 1-p
alpha_w <- (1-commision_rate)
alpha_l <- price-1
fraction <- kelly_criterion(p, alpha_w = alpha_w, alpha_l = alpha_l)
return(fraction)
}
kelly_lay_dec <- function(price, p, commision_rate){
p <- 1-p
alpha_w <- (1-commision_rate)
alpha_l <- price-1
fraction <- kelly_criterion(p, alpha_w = alpha_w, alpha_l = alpha_l)
return(fraction)
}
kelly_lay_back(2, 0.5, 0)
kelly_lay_back(2, 0.5, 0.05)
kelly_lay_back(2, 0.45, 0.05)
kelly_lay_back(2, 0.47, 0.05)
kelly_lay_back(2, 0.48, 0.05)
kelly_lay_back(2, 0.49, 0.05)
document()
devtools::load_all(".")
use_testthat()
seq(0,1, 10)
seq(0,1, 0.1)
p <- 0.1
n <- 5
chance_to_draw_n_games(p, n)+
chance_to_win_n_games(p, n)+
chance_to_win_n_games(1-p, n)
test()
test()
chance_to_win_n_games(0.51, 3)
chance_to_win_n_games(0.51, 4)
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
kelly_criterion(1/3, 3,1)
test()
test()
test()
test()
test*
)
test()
test()
test()
test()
test()
n <- 2
kelly_back_dec(n-1,1/n+0.01, 0.01)
kelly_back_dec(n-1,1/n, 0.01)
kelly_back_dec(2, 0.5, 0.01)
devtools::load_all(".")
kelly_back_dec(2, 0.5, 0.01)
kelly_back_dec(2, 0.5, 0.0)
length(kelly_back_dec(2, 0.5, 0.0))
library(RKelly)
kelly_back_dec(2, 0.5,0)
document()
library(devtools)
document()
devtools::load_all(".")
kelly_back_dec(2, 0.5,0)
test()
test()
test()
test()
test()
devtools::load_all(".")
library(RKelly)
library(devtools)
use_vignette('kelly_criterion')
check()
test()
browseVignettes()
browseVignettes('RKelly')
build_vignettes()
browseVignettes('RKelly')
build()
library(devtools)
document()
library(RKelly)
library(RKelly)
library(RKelly)
library(RKelly)
build()
library(devtools)
build()
check_cran()
install.packages('revdepcheck')
revdepcheck::revdep_check()
install.packages('revdepcheck')
source("https://install-github.me/r-lib/revdepcheck")
revdep_check()
revdepcheck::revdep_check()
library(RKelly)
library(RKelly)
devtools::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license(name = 'Arvid Kingl')
check()
library(RKelly)
library(RKelly)
build()
