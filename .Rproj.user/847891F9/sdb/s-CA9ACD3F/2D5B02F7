{
    "collab_server" : "",
    "contents" : "#' Calculate win chance after multiple matches\n#'\n#' Chance of a player winning the majority of n matches. Draws count not as a\n#' win\n#'\n#' @param p probability for player to win a single match\n#' @param n number of total matches playes\n#'\n#' @return The decimal chance of winning a game\n#' @export\n#'\n#' @examples\n#' chance_to_win_n_games(0.55,5) # Chance for player with p=0.55 to win best of 5 matches\nchance_to_win_n_games <-\nfunction(p, n){\n    is_even <- (n %% 2) == 0\n\n    if (is_even){\n        wins = n/2+1\n    } else {\n        wins = (n+1)/2\n    }\n\n    q <- 1-p\n\n    total_chance <- 0\n\n    if (!is_even){\n        for (i in seq(0,wins-1)){\n            total_chance <- total_chance + p**wins*(q**i)*choose(i+wins-1,i)\n        }\n    } else{\n        for (i in seq(0,wins-2)){\n            total_chance <- total_chance + p**wins*(q**i)*choose(i+wins-1,i)\n        }\n    }\n\n    return(total_chance)\n}\n\n\n#' Calculates the chance to draw out of n matches\n#'\n#' @param p probability of first (or second) player winning match\n#' @param n number of matches\n#'\n#' @return The decimal chance for a draw\n#' @export\n#'\n#' @examples\n#' chance_to_draw_n_games(0.4, 4) # Draw chance if one player has p=0.4 in four matches\nchance_to_draw_n_games <-\nfunction(p, n){\n    is_even <- (n %% 2) == 0\n\n    if(!is_even){\n        return(0.0)\n    } else {\n        n_draws <- n/2\n        q <- 1-p\n        chance <- q**(n_draws)*p**(n_draws)*choose(n,n_draws)\n        return(chance)\n    }\n}\n\n\n#' The Kelly criterion\n#'\n#' @param p The objective probability of the event\n#' @param alpha_w The return multiplier in case of the event happening\n#' @param alpha_l The return multiplier in case of the even not happening\n#'\n#' @return The Kelly optimised fraction that should be bet\n#' @export\n#'\n#' @examples\n#' kelly_criterion(0.5,1,1)\nkelly_criterion <-\nfunction(p, alpha_w, alpha_l){\n    q <- 1-p\n    numerator <- p*alpha_w-q*alpha_l\n    denominator <- alpha_w*alpha_l\n    return(numerator/denominator)\n}\n\n#' Kelly for back bet\n#'\n#' @param price Price to back in decimal odds\n#' @param p Probability of event to to materialise\n#' @param commision_rate Rate of commision charged on WINNINGS\n#'\n#' @return Kelly optimised fraction of stake relative to bank\n#' @export\n#'\n#' @examples\n#' kelly_back_dec(2,0.5,0.05)\nkelly_back_dec <- function(price,p, commision_rate){\n    alpha_w = (1-commision_rate)*(price-1)\n    alpha_l = 1\n    fraction = kelly_criterion(p, alpha_w = alpha_w, alpha_l = alpha_l)\n    return(fraction)\n}\n\n#' Kelly for lay bet\n#'\n#' @param price Price at which to lay\n#' @param p Base probability of event that is being laid\n#' @param commision_rate Rate of commision charged on WINNINGS\n#'\n#' @return Kelly optimised fraction of stake relative to bank\n#' @export\n#'\n#' @examples\nkelly_lay_dec <- function(price, p, commision_rate){\n    p <- 1-p\n    alpha_w <- (1-commision_rate)\n    alpha_l <- price-1\n    fraction <- kelly_criterion(p, alpha_w = alpha_w, alpha_l = alpha_l)\n    return(fraction)\n}\n",
    "created" : 1555240941282.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "577983980",
    "id" : "2D5B02F7",
    "lastKnownWriteTime" : 1555792945,
    "last_content_update" : 1555792945711,
    "path" : "~/Documents/AllThingsR/RKelly/R/probability_functions.R",
    "project_path" : "R/probability_functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}